
import streamlit as st
import datetime

# --- ‡∏£‡∏∞‡∏ö‡∏ö Login ---
def login():
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if password == "pwss2021":
        st.session_state["logged_in"] = True
        st.experimental_rerun()
    elif password != "":
        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

if "logged_in" not in st.session_state:
    login()
    st.stop()

import tkinter as tk
from tkinter import messagebox
import datetime

# ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô PWS'S LIFE CAFE
menus = {
    "Coffee (‡∏£‡πâ‡∏≠‡∏ô)": [
        ("‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã‡πà", 30), ("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà", 30), ("‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà", 35),
        ("‡∏•‡∏≤‡πÄ‡∏ï‡πâ", 35), ("‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤", 40), ("‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•", 40)
    ],
    "Coffee (‡πÄ‡∏¢‡πá‡∏ô)": [
        ("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà", 35), ("‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà", 40), ("‡∏•‡∏≤‡πÄ‡∏ï‡πâ", 40),
        ("‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤", 45), ("‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•", 45), ("Blue Sky Coffee", 40)
    ],
    "Coffee (‡∏õ‡∏±‡πà‡∏ô)": [
        ("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà", 40), ("‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà", 45), ("‡∏•‡∏≤‡πÄ‡∏ï‡πâ", 45),
        ("‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤", 50), ("‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•", 50)
    ],
    "‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©": [
        ("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà‡∏™‡πâ‡∏°", 50), ("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á", 50), ("‡∏Å‡∏≤‡πÅ‡∏ü‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß", 50)
    ],
    "Tea": [
        ("‡∏°‡∏±‡∏ó‡∏â‡∏∞‡∏£‡πâ‡∏≠‡∏ô", 30), ("‡∏°‡∏±‡∏ó‡∏â‡∏∞‡∏•‡∏≤‡πÄ‡∏ï‡πâ", 40), ("‡∏°‡∏±‡∏ó‡∏â‡∏∞‡∏•‡∏≤‡πÄ‡∏ï‡πâ‡∏õ‡∏±‡πà‡∏ô", 45), ("‡∏ä‡∏≤‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", 35)
    ],
    "Soda": [
        ("‡∏ö‡∏•‡∏π‡πÇ‡∏ã‡∏î‡∏≤", 40), ("‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÇ‡∏ã‡∏î‡∏≤", 35), ("‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÇ‡∏ã‡∏î‡∏≤", 40),
        ("‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÇ‡∏ã‡∏î‡∏≤", 35), ("‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà‡πÇ‡∏ã‡∏î‡∏≤", 35), ("‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà‡∏°‡∏¥‡πâ‡∏ô‡∏ï‡πå", 35), ("‡∏ä‡∏≤‡∏™‡∏ï‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà", 35)
    ],
    "Chocolate": [
        ("‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡∏£‡πâ‡∏≠‡∏ô", 30), ("‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡πÄ‡∏¢‡πá‡∏ô", 40), ("‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡∏õ‡∏±‡πà‡∏ô", 45)
    ],
    "Milk": [
        ("‡∏ô‡∏°‡∏™‡∏ï‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà", 40), ("‡∏ô‡∏°‡∏Å‡∏•‡πâ‡∏ß‡∏¢", 40), ("‡∏ô‡∏°‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•", 40),
        ("‡∏ô‡∏°‡πÄ‡∏ú‡∏∑‡∏≠‡∏Å", 40), ("‡∏ä‡∏≤‡∏ô‡∏°", 40), ("‡∏ô‡∏°‡∏ö‡∏•‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà", 40)
    ],
    "Smoothie": [
        ("Orange Smoothie", 45), ("Lychee Smoothie", 45), ("Mango Smoothie", 45),
        ("Kiwi Smoothie", 45), ("Strawberry Smoothie", 45),
        ("Blueberry Smoothie", 45), ("Passion Fruit Smoothie", 45)
    ]
}

sales_data = []
orders_in_progress = []
orders_completed = []

root = tk.Tk()
root.title("PWS'S LIFE CAFE - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå")
root.geometry("850x700")

selected_items = []
total_price = 0
cup_count = 0
payment_method = tk.StringVar(value="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î")

frame_name = tk.Frame(root)
frame_name.pack(pady=5)

search_frame = tk.Frame(root)
search_frame.pack(pady=5)

frame_items = tk.Frame(root)
frame_items.pack(pady=5)

frame_order = tk.Frame(root)
frame_order.pack(pady=5)

frame_bottom = tk.Frame(root)
frame_bottom.pack(pady=10)

# ===== ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö =====
tk.Label(frame_name, text="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:").pack(side=tk.LEFT)
entry_name = tk.Entry(frame_name, width=30)
entry_name.pack(side=tk.LEFT)

# ===== ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π =====
search_var = tk.StringVar()

def search_menu():
    keyword = search_var.get().strip().lower()
    show_all_menus(filter_keyword=keyword)

tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π: ").pack(side=tk.LEFT)
tk.Entry(search_frame, textvariable=search_var, width=30).pack(side=tk.LEFT)
tk.Button(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", command=search_menu).pack(side=tk.LEFT)

# ===== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ =====
order_listbox = tk.Listbox(frame_order, width=70, height=10)
order_listbox.pack()

label_total = tk.Label(frame_bottom, text="‡∏£‡∏ß‡∏°: 0 ‡∏ö‡∏≤‡∏ó", font=("Tahoma", 12))
label_total.pack()

label_change = tk.Label(frame_bottom, text="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: 0 ‡∏ö‡∏≤‡∏ó", font=("Tahoma", 12))
label_change.pack()

frame_payment = tk.Frame(frame_bottom)
frame_payment.pack()

entry_cash = tk.Entry(frame_payment)
entry_cash.pack(side=tk.LEFT)
tk.Radiobutton(frame_payment, text="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", variable=payment_method, value="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î").pack(side=tk.LEFT)
tk.Radiobutton(frame_payment, text="‡πÇ‡∏≠‡∏ô", variable=payment_method, value="‡πÇ‡∏≠‡∏ô").pack(side=tk.LEFT)

def add_item(name, price, qty=1):
    global total_price, cup_count
    selected_items.append((name, price, qty))
    order_listbox.insert(tk.END, f"{name} x{qty} - {price * qty} ‡∏ö‡∏≤‡∏ó")
    total_price += price * qty
    cup_count += qty
    label_total.config(text=f"‡∏£‡∏ß‡∏°: {total_price} ‡∏ö‡∏≤‡∏ó")

def clear_order():
    global selected_items, total_price, cup_count
    selected_items.clear()
    order_listbox.delete(0, tk.END)
    total_price = 0
    cup_count = 0
    label_total.config(text="‡∏£‡∏ß‡∏°: 0 ‡∏ö‡∏≤‡∏ó")
    label_change.config(text="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: 0 ‡∏ö‡∏≤‡∏ó")
    entry_cash.delete(0, tk.END)
    entry_name.delete(0, tk.END)
    search_var.set("")
    show_all_menus()

def pay():
    global selected_items, total_price, cup_count
    name = entry_name.get().strip()
    if not name:
        messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
        return
    try:
        cash = float(entry_cash.get()) if payment_method.get() == "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" else total_price
        change = cash - total_price
        if change < 0:
            messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
            return
        label_change.config(text=f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change:.2f} ‡∏ö‡∏≤‡∏ó")

        now = datetime.datetime.now()
        order = {
            "‡∏ä‡∏∑‡πà‡∏≠": name,
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": selected_items.copy(),
            "‡∏£‡∏ß‡∏°": total_price,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß": cup_count,
            "‡∏ä‡∏≥‡∏£‡∏∞": payment_method.get(),
            "‡πÄ‡∏ß‡∏•‡∏≤": now.strftime("%H:%M:%S")
        }
        sales_data.append(order)
        orders_in_progress.append(order)

        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å {name} ‡πÅ‡∏•‡πâ‡∏ß\n‡πÄ‡∏ß‡∏•‡∏≤: {order['‡πÄ‡∏ß‡∏•‡∏≤']}")
        clear_order()

    except ValueError:
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def show_summary():
    total_sales = sum(s['‡∏£‡∏ß‡∏°'] for s in sales_data)
    total_cups = sum(s['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß'] for s in sales_data)
    cash = sum(s['‡∏£‡∏ß‡∏°'] for s in sales_data if s['‡∏ä‡∏≥‡∏£‡∏∞'] == "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î")
    transfer = sum(s['‡∏£‡∏ß‡∏°'] for s in sales_data if s['‡∏ä‡∏≥‡∏£‡∏∞'] == "‡πÇ‡∏≠‡∏ô")
    messagebox.showinfo("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", f"‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {total_sales} ‡∏ö‡∏≤‡∏ó\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß: {total_cups}\n‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î: {cash} ‡∏ö‡∏≤‡∏ó\n‡πÇ‡∏≠‡∏ô: {transfer} ‡∏ö‡∏≤‡∏ó")

def show_orders():
    window = tk.Toplevel(root)
    window.title("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    tk.Label(window, text="\u23F3 ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à", font=("Tahoma", 12, "bold")).pack()
    for i, order in enumerate(orders_in_progress):
        text = f"[{order['‡πÄ‡∏ß‡∏•‡∏≤']}] {order['‡∏ä‡∏∑‡πà‡∏≠']} | {', '.join([f'{x[0]} x{x[2]}' for x in order['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']])} | {order['‡∏£‡∏ß‡∏°']} ‡∏ö‡∏≤‡∏ó"
        frame = tk.Frame(window)
        frame.pack(fill='x', pady=2)
        tk.Label(frame, text=text).pack(side=tk.LEFT)
        tk.Button(frame, text="‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", command=lambda idx=i: mark_done(idx, window)).pack(side=tk.RIGHT)

    tk.Label(window, text="\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", font=("Tahoma", 12, "bold")).pack()
    for order in orders_completed:
        text = f"[{order['‡πÄ‡∏ß‡∏•‡∏≤']}] {order['‡∏ä‡∏∑‡πà‡∏≠']} | {', '.join([f'{x[0]} x{x[2]}' for x in order['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']])} | {order['‡∏£‡∏ß‡∏°']} ‡∏ö‡∏≤‡∏ó"
        tk.Label(window, text=text).pack()

def mark_done(index, window):
    order = orders_in_progress.pop(index)
    orders_completed.append(order)
    window.destroy()
    show_orders()

def show_all_menus(filter_keyword=None):
    for widget in frame_items.winfo_children():
        widget.destroy()

    for category, items in menus.items():
        filtered_items = []
        for name, price in items:
            if not filter_keyword or filter_keyword in name.lower():
                filtered_items.append((name, price))
        if not filtered_items:
            continue

        tk.Label(frame_items, text=category, font=("Tahoma", 10, "bold")).pack(anchor="w", pady=(10, 0))

        for name, price in filtered_items:
            item_frame = tk.Frame(frame_items)
            item_frame.pack(anchor="w", padx=20, pady=2)

            tk.Label(item_frame, text=f"{name} ({price}‡∏ø)", width=25, anchor="w").pack(side=tk.LEFT)

            qty_var = tk.IntVar(value=1)
            tk.Spinbox(item_frame, from_=1, to=10, width=3, textvariable=qty_var).pack(side=tk.LEFT, padx=5)

            tk.Button(item_frame, text="‡πÄ‡∏û‡∏¥‡πà‡∏°", command=lambda n=name, p=price, q=qty_var: add_item(n, p, q.get())).pack(side=tk.LEFT)

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
show_all_menus()

# ===== ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á =====
tk.Button(frame_bottom, text="‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", bg="green", fg="white", command=pay).pack(pady=5)
tk.Button(frame_bottom, text="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", bg="red", fg="white", command=clear_order).pack(pady=2)
tk.Button(frame_bottom, text="üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢", command=show_summary).pack()
tk.Button(frame_bottom, text="üìã ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", command=show_orders).pack(pady=5)

root.mainloop()
