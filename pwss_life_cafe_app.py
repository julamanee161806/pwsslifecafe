
import streamlit as st
import datetime

# --- ‡∏£‡∏∞‡∏ö‡∏ö Login ---
def login():
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if password == "pwss2021":
        st.session_state["logged_in"] = True
        st.experimental_rerun()
    elif password != "":
        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

if "logged_in" not in st.session_state:
    login()
    st.stop()

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü", layout="wide")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
menu_data = {
    "‡∏Å‡∏≤‡πÅ‡∏ü": {
        "‡∏£‡πâ‡∏≠‡∏ô": {
            "‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã‡πà": 30,
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà": 30,
            "‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 35,
            "‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà": 35,
            "‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤": 35
        },
        "‡πÄ‡∏¢‡πá‡∏ô": {
            "‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã‡πà": 40,
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà": 40,
            "‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 45,
            "‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà": 45,
            "‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤": 45
        },
        "‡∏õ‡∏±‡πà‡∏ô": {
            "‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã‡πà": 50,
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà": 50,
            "‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 55,
            "‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà": 55,
            "‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤": 55
        }
    },
    "‡∏ä‡∏≤": {
        "‡πÄ‡∏°‡∏ô‡∏π": {
            "‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": 40,
            "‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢": 40,
            "‡∏ä‡∏≤‡πÄ‡∏¢‡πá‡∏ô": 40
        }
    },
    "‡∏ô‡∏°": {
        "‡πÄ‡∏°‡∏ô‡∏π": {
            "‡∏ô‡∏°‡∏™‡∏î": 35,
            "‡∏ô‡∏°‡∏ä‡∏°‡∏û‡∏π": 35,
            "‡πÑ‡∏°‡πÇ‡∏•": 35,
            "‡πÇ‡∏≠‡∏ß‡∏±‡∏•‡∏ï‡∏¥‡∏ô": 35
        }
    },
    "‡πÇ‡∏ã‡∏î‡∏≤": {
        "‡πÄ‡∏°‡∏ô‡∏π": {
            "‡∏ö‡∏•‡∏π‡∏Æ‡∏≤‡∏ß‡∏≤‡∏¢": 40,
            "‡πÅ‡∏î‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÇ‡∏ã‡∏î‡∏≤": 40,
            "‡∏Å‡∏µ‡∏ß‡∏µ‡πà‡πÇ‡∏ã‡∏î‡∏≤": 40
        }
    },
    "‡∏™‡∏°‡∏π‡∏ó‡∏ï‡∏µ‡πâ": {
        "‡πÄ‡∏°‡∏ô‡∏π": {
            "‡∏™‡∏ï‡∏£‡∏≠‡∏ß‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà": 45,
            "‡∏ö‡∏•‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà": 45,
            "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á": 45
        }
    }
}

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ session state
if 'orders' not in st.session_state:
    st.session_state.orders = []
if 'selected_category' not in st.session_state:
    st.session_state.selected_category = None
if 'selected_subcategory' not in st.session_state:
    st.session_state.selected_subcategory = None

st.title("‚òï ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å
st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å")
cols = st.columns(len(menu_data))
for i, category in enumerate(menu_data.keys()):
    if cols[i].button(category):
        st.session_state.selected_category = category
        st.session_state.selected_subcategory = None

category = st.session_state.selected_category
subcategory = st.session_state.selected_subcategory

# ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
if category:
    st.divider()
    st.subheader(f"üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {category}")
    subcategories = menu_data[category].keys()
    cols = st.columns(len(subcategories))
    for i, subcat in enumerate(subcategories):
        if cols[i].button(subcat):
            st.session_state.selected_subcategory = subcat

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏¢‡πà‡∏≠‡∏¢
if category and subcategory:
    st.divider()
    st.subheader(f"üçΩ ‡πÄ‡∏°‡∏ô‡∏π: {category} > {subcategory}")
    menu_items = menu_data[category][subcategory]

    with st.form("order_form", clear_on_submit=False):
        quantities = {}
        for item, price in menu_items.items():
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f"**{item}** - {price} ‡∏ö‡∏≤‡∏ó")
            with col2:
                qty = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {item}", min_value=0, key=f"{item}-{category}", step=1)
                quantities[item] = (price, qty)

        customer_name = st.text_input("üßç‚Äç‚ôÇÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤/‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", key="customer_name")
        total = sum(price * qty for price, qty in quantities.values())
        st.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total} ‡∏ö‡∏≤‡∏ó")
        paid = st.number_input("üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤", min_value=0, value=0, step=1, key="paid_amount")
        change = paid - total if paid >= total else 0
        st.success(f"üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change} ‡∏ö‡∏≤‡∏ó")

        submitted = st.form_submit_button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")

        if submitted:
            order_items = [(item, price, qty) for item, (price, qty) in quantities.items() if qty > 0]
            if order_items:
                order = {
                    "name": customer_name,
                    "items": order_items,
                    "total": total,
                    "paid": paid,
                    "change": change,
                    "time": datetime.datetime.now().strftime("%H:%M:%S"),
                    "done": False
                }
                st.session_state.orders.append(order)
                st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                st.session_state.selected_category = None
                st.session_state.selected_subcategory = None
                st.experimental_rerun()

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
st.divider()
st.subheader("üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

if st.session_state.orders:
    for i, order in enumerate(st.session_state.orders):
        with st.expander(f"üïí {order['time']} - {order['name']} | ‡∏¢‡∏≠‡∏î {order['total']} ‡∏ö‡∏≤‡∏ó", expanded=False):
            for item, price, qty in order["items"]:
                st.write(f"{item} - {price} x {qty} = {price * qty} ‡∏ö‡∏≤‡∏ó")
            st.write(f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {order['total']} ‡∏ö‡∏≤‡∏ó")
            st.write(f"‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤: {order['paid']} ‡∏ö‡∏≤‡∏ó | ‡∏ó‡∏≠‡∏ô: {order['change']} ‡∏ö‡∏≤‡∏ó")

            col1, col2 = st.columns([1, 1])
            with col1:
                if st.button("üóë ‡∏•‡∏ö", key=f"del-{i}"):
                    st.session_state.orders.pop(i)
                    st.rerun()
            with col2:
                if st.button("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" if not order["done"] else "‚úîÔ∏è ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", key=f"done-{i}"):
                    st.session_state.orders[i]["done"] = True
                    st.rerun()
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")

# ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
st.divider()
if st.button("üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"):
    total_cash = 0
    total_cups = 0
    for order in st.session_state.orders:
        total_cash += order['total']
        total_cups += sum(qty for _, _, qty in order['items'])
    st.success(f"‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: {total_cash} ‡∏ö‡∏≤‡∏ó | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß: {total_cups} ‡πÅ‡∏Å‡πâ‡∏ß")
