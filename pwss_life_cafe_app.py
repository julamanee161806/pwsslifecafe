
import streamlit as st
import datetime

# --- ‡∏£‡∏∞‡∏ö‡∏ö Login ---
def login():
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if password == "pwss2021":
        st.session_state["logged_in"] = True
        st.experimental_rerun()
    elif password != "":
        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

if "logged_in" not in st.session_state:
    login()
    st.stop()

st.set_page_config(page_title="PWS's Life Cafe", layout="wide")

# --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π ---
menu = {
    "‡∏Å‡∏≤‡πÅ‡∏ü": {
        "‡∏£‡πâ‡∏≠‡∏ô": {
            "‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã‡πà": 30,
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà": 30,
            "‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà": 35,
            "‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 35,
            "‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤": 40,
            "‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•": 40,
            "‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 30
        },
        "‡πÄ‡∏¢‡πá‡∏ô": {
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà": 35,
            "‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà": 40,
            "‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 40,
            "‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤": 45,
            "‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•": 45,
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà‡∏™‡πâ‡∏°": 50,
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á": 50,
            "Blue Sky Coffee": 40,
            "‡∏Å‡∏≤‡πÅ‡∏ü‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß": 50,
            "‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 40
        },
        "‡∏õ‡∏±‡πà‡∏ô": {
            "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà": 40,
            "‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà": 45,
            "‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 45,
            "‡∏°‡∏≠‡∏Ñ‡∏Ñ‡πà‡∏≤": 50,
            "‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•": 50,
            "‡∏Å‡∏≤‡πÅ‡∏ü‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß": 50,
            "‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å": 45
        }
    },
    "‡∏ä‡∏≤": {
        "‡∏°‡∏±‡∏ó‡∏â‡∏∞ ‡∏£‡πâ‡∏≠‡∏ô": 30,
        "‡∏°‡∏±‡∏ó‡∏â‡∏∞‡∏•‡∏≤‡πÄ‡∏ï‡πâ": 40,
        "‡∏°‡∏±‡∏ó‡∏â‡∏∞‡∏•‡∏≤‡πÄ‡∏ï‡πâ ‡∏õ‡∏±‡πà‡∏ô": 45,
        "‡∏ä‡∏≤‡∏°‡∏∞‡∏ô‡∏≤‡∏ß": 35,
        "‡∏ä‡∏≤‡∏ô‡∏°": 40
    },
    "‡∏ô‡∏°": {
        "‡∏ô‡∏°‡∏™‡∏î‡∏™‡∏ï‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà": 40,
        "‡∏ô‡∏°‡∏Å‡∏•‡πâ‡∏ß‡∏¢": 40,
        "‡∏ô‡∏°‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•": 40,
        "‡∏ô‡∏°‡πÄ‡∏ú‡∏∑‡∏≠‡∏Å": 40,
        "‡∏ô‡∏°‡∏ö‡∏•‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà": 40
    },
    "‡πÇ‡∏ã‡∏î‡∏≤": {
        "‡∏ö‡∏•‡∏π‡πÇ‡∏ã‡∏î‡∏≤": 40,
        "‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÇ‡∏ã‡∏î‡∏≤": 35,
        "‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß‡πÇ‡∏ã‡∏î‡∏≤": 40,
        "‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ã‡∏î‡∏≤": 35,
        "‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà‡πÇ‡∏ã‡∏î‡∏≤": 35,
        "‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà‡∏°‡∏¥‡πâ‡∏ô‡∏ï‡πå": 35,
        "‡∏ä‡∏≤‡∏™‡∏ï‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà": 35
    },
    "‡∏™‡∏°‡∏π‡∏ó‡∏ï‡∏µ‡πâ": {
        "Orange Smoothie ‡∏™‡πâ‡∏° ‡∏õ‡∏±‡πà‡∏ô": 45,
        "Lychee Smoothie ‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà ‡∏õ‡∏±‡πà‡∏ô": 45,
        "Mango Smoothie ‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á ‡∏õ‡∏±‡πà‡∏ô": 45,
        "Kiwi Smoothie ‡∏Å‡∏µ‡∏ß‡∏µ‡πà ‡∏õ‡∏±‡πà‡∏ô": 45,
        "Strawberry Smoothie ‡∏™‡∏ï‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà ‡∏õ‡∏±‡πà‡∏ô": 45,
        "Blueberry Smoothie ‡∏ö‡∏•‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡∏µ‡πà ‡∏õ‡∏±‡πà‡∏ô": 45,
        "Passion Fruit Smoothie ‡πÄ‡∏™‡∏≤‡∏ß‡∏£‡∏™ ‡∏õ‡∏±‡πà‡∏ô": 45
    }
}

if "orders" not in st.session_state:
    st.session_state.orders = []

if "sales" not in st.session_state:
    st.session_state.sales = []

st.title("‚òï ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå - PWS's LIFE CAFE")

# --- ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ---
st.header("üßæ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
with st.form("order_form"):
    col1, col2 = st.columns([2, 1])
    selections = []
    with col1:
        for cat, items in menu.items():
            st.subheader(cat)
            if isinstance(items, dict):
                for subcat, subitems in items.items():
                    st.markdown(f"**{subcat}**")
                    for item, price in subitems.items():
                        qty = st.number_input(f"{item} ({price}‡∏ø)", min_value=0, step=1, key=f"{cat}_{subcat}_{item}")
                        if qty > 0:
                            selections.append((item, price, qty))
            else:
                for item, price in items.items():
                    qty = st.number_input(f"{item} ({price}‡∏ø)", min_value=0, step=1, key=f"{cat}_{item}")
                    if qty > 0:
                        selections.append((item, price, qty))

    with col2:
        customer_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
        total = sum(price * qty for _, price, qty in selections)
        st.markdown(f"### ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total} ‡∏ø")
        paid = st.number_input("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤ (‡∏ö‡∏≤‡∏ó)", min_value=0, step=1)
        change = paid - total if paid >= total else 0
        st.markdown(f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change} ‡∏ø")

        submitted = st.form_submit_button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
        if submitted and selections and customer_name:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            order = {
                "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö": customer_name,
                "‡πÄ‡∏ß‡∏•‡∏≤": now,
                "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°": total,
                "‡∏à‡πà‡∏≤‡∏¢": paid,
                "‡∏ó‡∏≠‡∏ô": change,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à",
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": selections
            }
            st.session_state.orders.append(order)
            st.session_state.sales.append(order)
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            st.rerun()

# --- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ---
st.header("üìã ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
for i, order in enumerate(st.session_state.orders):
    with st.expander(f"{order['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö']} | {order['‡πÄ‡∏ß‡∏•‡∏≤']} | {order['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']}"):
        for item, price, qty in order['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']:
            st.write(f"{item} x{qty} = {price * qty} ‡∏ø")
        st.write(f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {order['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°']} ‡∏ø")
        if st.button("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", key=f"done_{i}"):
            st.session_state.orders[i]['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
            st.rerun()

# --- ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ---
st.header("üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
if st.button("‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"):
    df = pd.DataFrame(st.session_state.sales)
    total_income = sum(order['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'] for order in st.session_state.sales)
    total_cups = sum(qty for order in st.session_state.sales for _, _, qty in order['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'])
    st.metric("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°", f"{total_income} ‡∏ø")
    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢", f"{total_cups} ‡πÅ‡∏Å‡πâ‡∏ß")

    for i, order in enumerate(st.session_state.sales):
        with st.expander(f"{order['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö']} | {order['‡πÄ‡∏ß‡∏•‡∏≤']}"):
            for item, price, qty in order['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£']:
                st.write(f"{item} x{qty} = {price * qty} ‡∏ø")
            st.write(f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {order['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°']} ‡∏ø | ‡∏à‡πà‡∏≤‡∏¢: {order['‡∏à‡πà‡∏≤‡∏¢']} ‡∏ø | ‡∏ó‡∏≠‡∏ô: {order['‡∏ó‡∏≠‡∏ô']} ‡∏ø")
